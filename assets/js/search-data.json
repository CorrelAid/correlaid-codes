{
  
    
        "post0": {
            "title": "R in jupyter notebooks",
            "content": "Jupyter&#39;s intentions . Jupyter was orignally designed as an interactive environment for Julia, Python and R. This is even reflected in the name JuliapythonR, even if they snug an extra e in there. In the python data science community Jupyter is widely used, while the R community uses Rstudio as the standard IDE and it is what most newcomers to R are introduced to initially. . Here we&#39;ll give an example of how to use Jupyter as an alternative to Rstudio. This should not be misunderstood. Rstudio is a great tool and we don&#39;t want to downplay its importance. The main advantage of using Jupyter is access to a set of tools that are specifically build for Jupyter notebooks. Many of these tools were developed with python in mind, but the multi language usability of Jupyter allows us to make use of them in R. This post is an example in the sense, that it was written for fastPages, a notebook blogging framework. . IRkernel and code execution . In order to run R code in Jupyter an R kernel needs to be registered with Jupyter. This requires an existing R installation and the additional R package IRkernel. This module can then register the R installation as a kernel for Jupyter. Subsequently the R kernel can be selected when running a Jupyter notebook which allows the execution from R code in code cells. . The following is a simple example of loading some standard R packages, some data and creating a plot. . require(&#39;tidyverse&#39;); data(mtcars) . mtcars %&gt;% arrange(&#39;cyl&#39;) %&gt;% ggplot(aes(x=mpg,y=cyl)) + geom_point() . Interactive features . Nowadays there are many libraries that create interactive plots and maps that are driven by JavaScript. Many of these naturally work well together with Jupyter notebooks ans fastPages. An example for this is leaflet. A popular JavaScript library for displaying locations on maps. R has a package with the same name also supporting this library. The following is a standard example from the package website. . library(leaflet) m &lt;- leaflet() %&gt;% addTiles() %&gt;% # Add default OpenStreetMap map tiles addMarkers(lng=174.768, lat=-36.852, popup=&quot;The birthplace of R&quot;) m # Print the map . &lt;!doctype html&gt; . . Google Colab and Reproducibility . Another nice feature of fastPages is that it directly support links to Google Colab and Binder. These tools allow readers of Jupyter Notebooks/fastPages blog posts to execute the code themselves without needing a local Jupyter setup local installation. Unfortunately Binder does not support R kernels at this point, but Google Colab does. There posts (like this one) can be opened there and can be executed and modified. One could even use Google Colab to create blog posts to begin with. The following blog post gives a few more details on that. There are a few limitation to Google Colab however, for instance some interactive libraries like leaflet don&#39;t display correctly. . Conclusion . We showed how to using Jupyter notebooks for R programming is possible and opens up many possibilities to the R user. Out of the features that this brings to the R user, we want to highlight most, that it allows to create blog posts using fastPages, just like this one. .",
            "url": "https://codes.correlaid.org/first%20steps/r/jupyter/2021/02/18/R_in_jupyter.html",
            "relUrl": "/first%20steps/r/jupyter/2021/02/18/R_in_jupyter.html",
            "date": " • Feb 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://codes.correlaid.org/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://codes.correlaid.org/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "CorrelAid is a non-partisan non-profit network of data science enthusiasts who want to change the world through data science. We dedicate our work to the social sector and those organizations that strive for making the world a better place. In order to improve data literacy in society, we share our knowledge within our network and beyond and are always looking for ways to broaden our horizons. . On this blog, we collect code contributions from members of our network of over 1600 data scientists. Small code snippets, longer analyses, posts about internal projects as well as an overview over our open source contributions have a place here. . Learn more about CorrelAid here .",
          "url": "https://codes.correlaid.org/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Open Source",
          "content": "At CorrelAid, we are big fans of Open Source. We contribute to the community through the maintenance and development of several R and Python packages that all have the aim to make data more easily accessible. In addition, we try to open source our Data4Good projects whenever GDPR allows for it. Finally, we have made our internal documentation and several of our internal tools openly accessible. . We actively contribute While we often can’t open source our Data4Good projects due to GDPR requirements, we contribute . Package Development . datenguidepy: Python wrapper for the datenguide API, available on PyPi | datenguideR: R wrapper for the datenguide API | newsanchor: R wrapper for the NewsAPI, available on CRAN | pocketapi: R wrapper for the Pocket API, available on CRAN | . Data4Good projects and events . Erlassjahr: code and data for the interactive map our project team built for Erlassjahr e.V. | GLEIF relationship visualization tool: client and server, developed as part of a hackathon together with GLEIF. Learn more about the tool here | . Education . TidyTuesday: CorrelAid tidytuesday contributions | Gender equality and mobility: Code and data for the blog post about gender differences in mobility patterns | CorrelAidX Challenge: Over the course of 8 weeks in summer 2020, we called on our local chapters to use regional data, provided by the state statistical offices, from their region and submit creative data projects using the python package developed by Datenguide in collaboration with CorrelAid. You can read more about the challenge here. Commuters in Germany: Code for the interactive dashboard, developed by CorrelAidX Bremen | Moving through Berlin by bike: Code for the interactive dashboard, developed by CorrelAidX Berlin | The Datenguide Chatbot: code for a chatbot to interact with the datenguide API, developed by CorrelAidX Munich | Child wellbeing in Germany: code for an interactive jupyter notebook, developed by CorrelAidX Hamburg | Datenguide Viz: code for an interactive notebook to interact with the datenguide API for Hesse | . | CorrelCollection: Collection of materials from our annual conference, the open online data meetup series and other events and workshops | . Open Source CorrelAid Infrastructure . Hugo Website: code for our website correlaid.org | CorrelAid Code[s] Blog: code for this blog codes.correlaid.org | CorrelAid docs: internal documentation / wiki, available at docs.correlaid.org | projectutils: R package for coordination of our projects | projectsdb: “database” of some of our finished projects | projects-django: project management application (currently in development) | correltools: R package for various CorrelAid things (in development) | correlaidmatplotlib: CorrelAid Matplotlib style, available on PyPi | .",
          "url": "https://codes.correlaid.org/opensource/",
          "relUrl": "/opensource/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://codes.correlaid.org/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}